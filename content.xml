<?xml version="1.0" encoding="UTF-8"?>
<div class="slides">
    <section id="opener">
        <h1>SAP PI - How We Work</h1>
        <h3>SAUG Melbourne Conference 2015</h3>
        <p>
            <small><a href="http://about.sufw.me">Sascha Wenninger</a> (<a href="http://twitter.com/sufw">@sufw</a>)</small>
        </p>
        <img src="img/Blue_T_3D.png" style="border: none;"/>
        <img src="img/SAUG.png" width="114px" style="border: none;"/>
    </section>
    
    
    <section>
        <h2>About Me</h2>
        
    </section>
    
    
    <section id="lean">
        
    </section>
    
    
    
    <section id="innovationTokens">
        
    </section>
    
    
    
    <section id="context">
        <section>
            
        </section>
        
    </section>
    
    
    <section>
        <h2>Standard over Proprietary</h2>
    </section>
    
    
    <section id="schemas">
        
    </section>
    
    
    
    <section id="mappings">
        <section>
            <h2>Mappings</h2>
        </section>
        
        <section>
            <h2>Graphical Mapping</h2>
            <ul>
                <li>Drag &amp; Drop</li>
                <li>"default" choice</li>
                <li>Looks Simple</li>
            </ul>
            <h1>NEED SCREENSHOT</h1>
        </section>
        
        <section>
            <img src="img/GraphicalMapping.png"/>
        </section>
        
        <section data-background="img/GraphicalMapping_dark.png">
            <p>However...</p>
            <ul>
                <li>Gets unwieldy, quickly</li>
                <li>Not documentable without <a href="http://figaf.com/services/pi-documenter/">other tools</a></li>
                <li>Context-Hell is always near</li>
            </ul>
        </section>
        
        <section>
            <h2>XSLT</h2>
        </section>
        
        <section>
            <h3>Portable</h3>
            <p>Standard language</p>
            <p>Used by most middleware systems</p>
            <p>Collaboration! :-)</p>
        </section>
        
        <section>
            <h3>Documentable</h3>
            <pre><code class="hlxml" data-trim>
<xsl:template match="/*[child::UnitCodeRequest_response]" priority="10">
    <!-- Check if the name of the first child of the root element matches that of our expected response message
         The name of the root node depends on the Message Types defined in the Service Interface in the ESR, so we don't know it for sure at runtime.
         The name we are looking for in the match attribute above is the name of the SQL-XML's root node, followed by '_response'. See below for the original query.
         This whole thing is done by having this template override (via higher priority) the other 'root node' template which outputs the SQL request otherwise. -->
    
    <UnitCodeRequestResponse>
        <!-- The name of this XML element does need to match the one defined in the Service Interface, or else it may fail schema validation in the service consumer -->
        <xsl:apply-templates mode="result"/>
    </UnitCodeRequestResponse>
</xsl:template></code></pre>
        </section>
        
        <section>
            <h3>Tool support</h3>
            <ul>
                <li>Debuggers</li>
                <li>Versioning &amp; diffs</li>
                <li><a href="http://stackoverflow.com/search?q=xslt">StackOverflow</a></li>
            </ul>
        </section>
        
        <section>
            <h1>TODO: NEED SCREENSHOT OF DEBUGGER</h1>
        </section>
        
        <section>
            <h3>Extensible</h3>
            <p>includes &amp; overrides</p>
            <p>=</p>
            <p>Regression-safe adding</p>
        </section>
        
        <section>
            <h3>Performance</h3>
            <p>In <em>most</em> cases a non-issue</p>
            <p>Much improved in PI 7.1 or later</p>
            <p>AusPost's "POSLog" interface used only XSLT for 1m+ messages/day</p>
        </section>
        
        <section>
            <h3>Challenges</h3>
        </section>
        
        <section data-background="img/TheScream.jpg">
            <h2>Muenchian Method</h2>
        </section>
        
        <section>
            
            <table>
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th rowspan="3"></th>
                        <th>Last Name</th>
                        <th>First Name</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Marie</td>
                        <td>Curie</td>
                        <td></td>
                        <td>Becquerel</td>
                        <td>Henri</td>
                    </tr>
                    <tr>
                        <td>Pierre</td>
                        <td>Curie</td>
                        <td></td>
                        <td>Curie</td>
                        <td>Henri</td>
                    </tr>
                    <tr>
                        <td>Henri</td>
                        <td>Becquerel</td>
                        <td></td>
                        <td></td>
                        <td>Marie</td>
                    </tr>
                </tbody>
            </table>
        </section>
        
        <section>
            <h2>XSLT 2.0</h2>
            <p>Makes many things <em>much</em> simpler!</p>
            <p>Supported in a <a href="http://scn.sap.com/community/pi-and-soa-middleware/blog/2014/10/14/how-to-import-and-use-xslt-20-mappings-in-sap-pipo">limited</a> way from PI 7.31 SP11</p>
            <p>Alternative: Java wrapper.</p>
        </section>
        
        
    </section>
    
    
    
    <section id="sourceControl">
        <h2>Source Control</h2>
    </section>
    


    <section id="alerting">
        <section data-background="img/SafetyFirst.jpg">
            <h2>Alerting</h2>
        </section>
        
        
        <section>
            <h3>It's a Problem...</h3>
            <img src="img/MonitoringBigIssue.png"/>
            <p><small>Source: <a href="http://scn.sap.com/community/process-orchestration/blog/2015/10/28/results-of-the-global-survey-for-sap-process-integration-part-1-of-2">IFG for PI Annual Survey</a></small></p>
        </section>
        
        
        <section>
            <h2>SAP Standard</h2>
            <p>Traditional Alert Framework</p>
            <p>Since 7.3: also Component-Based Message Alerting &amp; SolMan</p>
        </section>
        
        
        <section>
            <div>
                <p>Difficult to set up; <em>very</em> sparse documentation</p>
                <p>Requires SolMan as central monitor</p>
            </div>
            <div class="fragment">
                <h3>IFG Survey results:</h3>
                <p>25% adoption</p>
                <p>Barriers: 
                    <ol>
                        <li>20%: org issues</li>
                        <li>15%: lack of skills</li>
                    </ol>
                </p>
            </div>
        </section>
        
        
        <section>
            <h2>MMG's Journey</h2>
            <ol>
                <li>Alert Framework</li>
                <li>CBMA</li>
                <li>Custom Solution</li>
            </ol>
        </section>
        
        
        <section>
            <h3>Aims</h3>
            <p>Simple</p>
            <p style="text-decoration: line-through;">Email</p>
            <p style="text-decoration: line-through;">Noise</p>
        </section>
        
        
        <section>
            <h3>Initial Design</h3>
            <em>Insert Diagram here</em>
        </section>
        
        
    </section>  
    
</div>
